set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix encryption

set ::timeout 60000

do_early_test encryption_init {
  catch {db close}
  forcedelete test_encryption_key
  forcedelete test_encryption

  sqlite3 db test_encryption
  execsql {
    PRAGMA key = 'test_encryption_key';
    CREATE TABLE encrypted(a, b, c);
    INSERT INTO encrypted VALUES('data1', 'data2', 'data3');
  }
  execsql {
    SELECT * FROM encrypted;
  }
}

do_test encryption-1.4 {
  set fd2 "[open test_encryption w]"
  puts $fd2 "key 0: <ignore>"
  puts $fd2 "key 1: <encrypt>"
  puts $fd2 "key 2: <decrypt>"
  close $fd2
  execsql {
    SELECT a FROM encrypted;
  }
} {data1}

do_test encryption-2.1 {
  execsql {
    CREATE TABLE unencrypted(a, b, c);
    INSERT INTO unencrypted VALUES('data1', 'data2', 'data3');
  }
  execsql {
    SELECT a FROM unencrypted;
  }
} {data1}

ifcapable auth {
  do_test encryption-3.1 {
    set res1 ""
    set res2 ""
    set res3 ""
    set res4 ""
    set res5 ""
    execsql {
      SELECT * FROM encrypted;
      SELECT * FROM encrypted;
      SELECT * FROM unencrypted;
      SELECT * FROM unencrypted;
      SELECT * FROM encrypted;
    }
    set res1
    set res2
    set res3
    set res4
    set res5
    execsql {
      CREATE TABLE encrypted2(a, b, c);
    }
    execsql {
      SELECT * FROM encrypted2;
    }
    execsql {
      DROP TABLE encrypted2
    }
    execsql {
      SELECT * FROM encrypted2;
    }
    set res1
  } {data1 data2 data3 data1 data2 data3}

  do_test encryption-4.5 {
    execsql {
      SELECT * FROM encrypted;
    }
  } {data1 data2 data3}

  do_test encryption-4.10 {
    execsql {
      SELECT * FROM encrypted2
    }
  } {}
}

finish_test