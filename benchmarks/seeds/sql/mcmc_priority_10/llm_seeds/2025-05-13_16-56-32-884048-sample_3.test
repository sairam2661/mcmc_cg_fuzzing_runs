set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix sqlite_backup

set ::timeout 60000

proc sqlite_backup_proc {} {
  global sqlite_backup_args
  lappend sqlite_backup_args
  expr {1}    } 0 1 101

do_test sqlite_backup-1.1 {
  db close
  db init testdb
} {wal}

do_test sqlite_backup-1.2 {
  catch {db eval {
    CREATE TABLE a(x);
    INSERT INTO a VALUES(1);
  }}
  execsql {SELECT x FROM a}
} {1}

do_execsql_test sqlite_backup-1.3 {
  BEGIN;
  INSERT INTO a VALUES(2);
  COMMIT;
  SELECT x FROM a;
} {1 2}

set sqlite_backup_args 0

do_test sqlite_backup-2.1 {
  db close
  sqlite_backup_init "testdb" "main" "newdb" "main"
} 1

do_test sqlite_backup-2.2 {
  sqlite_backup_step 1 ""
} {SQLITE_DONE}

do_test sqlite_backup-2.3 {
  sqlite_backup_finish 1
} {SQLITE_OK}

catch { sqlite_backup 1 }

ifcapable backup {
  sqlite_backup_init "newdb" "main" "olddb" "main"

  do_test sqlite_backup-3.1 {
    set sqlite_backup_step 1 "INSERT INTO abc VALUES(1)"
  } {SQLITE_DONE}

  do_test sqlite_backup-3.2 {
    set sqlite_backup_step 1 "INSERT INTO abc VALUES(2)"
  } {SQLITE_DONE}

  do_test sqlite_backup-3.3 {catch {set sqlite_backup_step 1 "INSERT INTO def VALUES(1)"}} {1}

  do_execsql_test sqlite_backup-3.4 {
    COMMIT;
    SELECT count(*) FROM abc;
  } {2}

  do_execsql_test sqlite_backup-3.5 {
    SELECT count(*) FROM def;
  } {0}
}

finish_test