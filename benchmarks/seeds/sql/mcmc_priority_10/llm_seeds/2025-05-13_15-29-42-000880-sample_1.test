set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix complex

set ::timeout 60000  	 Globa variable to set a default timeout  for execsql commands in the test file
set enable_retry 1 	   Global variable to control retry logic in the test

proc retry_execsql {sql {arg {}}} {
  global enable_retry
  if {$enable_retry} {
    set retry_count 0
    while {1} {
      set result $arg
      if { $result eq "ok" } {
        break
      } elseif { $retry_count   3 } {
        return $result
      } else {
        incr retry_count
        set result  "retrying..."
        set result  $::tester_retry_execsql $sql
      }
    }
  }
  return $result
}

proc count_rows_in_tbl {tbl} {
  execsql "SELECT count(*) FROM $tbl"
}

proc create_table_with_index {name {columns {}}} {
  execsql "CREATE TABLE $name ($columns)"
}

proc drop_table {name}  {
  execsql "DROP TABLE IF EXISTS $name"
  execsql "DELETE FROM sqlite_master WHERE name LIKE '$name%'"
}

do_execsql_test complex-1.1 {
  CREATE TABLE t1(c1, c2);
  INSERT INTO t1 VALUES(1, 2);
  INSERT INTO t1 VALUES(3, 4);
  SELECT c1 FROM t1;
} {1 3}

do_test complex-2.1 {
  retry_execsql {
    CREATE TABLE t2(c1, c2);
    INSERT INTO t2 VALUES(5, 6);
  } "ok"
} {ok}

do_execsql_test complex-3.1 {
  INSERT INTO t1 VALUES(7, 8);
  SELECT * FROM t1;
} {1 2 3 4 7 8}

set start_time 0
proc get_time {sql {arg {}}} {
  set stop_time 0
  set stop_time  execsql "$sql; SELECT sqlite_current_timestamp"
  puts "start_time = $start_time; stop_time = $stop_time;"
  return $stop_time
}

create_table_with_index t3 {c1 text NOT NULL UNIQUE}
do_execsql_test complex-3.2 {
  INSERT INTO t3 VALUES('value1');
  SELECT c1 FROM t3 WHERE c1="value1";
} {"value1"}
drop_table t2
drop_table t3

finish_test