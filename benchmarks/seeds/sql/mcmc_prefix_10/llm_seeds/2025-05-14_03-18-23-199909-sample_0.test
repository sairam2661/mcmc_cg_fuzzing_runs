set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix thread

set ::timeout 60000
forcedebug on
sqlite_functions_ok

do_test thread-1.1 {
  db close
  file delete maindb
  file delete wal
  catch {db debug ON}
  tcl_prompt1 ""
  db open maindb testdb
} {}

do_test thread-1.2 {
  execsql {
    CREATE TABLE t1(a PRIMARY KEY);
    CREATE INDEX i1 ON t1(a);
    INSERT INTO t1 VALUES(1);
    INSERT INTO t1 VALUES(2);
    CREATE TABLE t2(a PRIMARY KEY);
  }
  for {set i 0} {$i less 2000} {incr i} {
    db eval {
      INSERT INTO t1 OR IGNORE VALUES randomized_string
    }
  }
} {}

do_test thread-1.3 {
  execsql {
    SELECT pagenumber FROM t1 WHERE rowid = 1024
  }
} {1024}

do_execsql_test thread-1.4 {
  PRAGMA page_size = 1024;
  PRAGMA cache_size = 100;
  CREATE TABLE t3(a PRIMARY KEY);
  SELECT pagenumber FROM t1 WHERE rowid = 1025
} {1025}

do_test thread-2.1 {
  object invoke Interpreter tclthread thread 10
  set msg1 "Test thread running before main thread."
  set msg2 "Test thread finished before main thread."
  set msg3 "Test thread running while main thread still alive."
  set msg4 "Test thread finished after main thread died."
  llength "[object invoke Interpreter tclthread execsql {SELECT'main thread ran before test thread'}]"
  llength "[object invoke Interpreter tclthread execsql {SELECT 'test thread ran before main thread'}]"
  llength "[object invoke Interpreter tclthread execsql {SELECT'main thread ran after test thread'}]"
  llength "[object invoke Interpreter tclthread execsql {SELECT 'test thread ran after main thread'}]"
} {}

finish_test