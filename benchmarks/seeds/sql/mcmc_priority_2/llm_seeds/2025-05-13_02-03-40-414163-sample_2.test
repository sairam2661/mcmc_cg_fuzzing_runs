set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix wal

set ::timeout 60000

proc wal_proc {} {
  global walargs
  unset walargs
  execsql {
    CREATE TABLE a(x);
    INSERT INTO a VALUES(1);
  }
}

proc wal_func {sql} {
  global walargs
  set res {}
  if {$walargs} { append res $walargs }
  if {$sql ne {}} { append res "$sql" }
  return $res
}

proc wal_check {tclRes dbRes} {
  if {$tclRes ne $dbRes} { error "$tclRes!= $dbRes" }
}

do_test wal-1.1 {
  set walargs
  execsql {
    SELECT x FROM a;
  }
} {}

do_execsql_test wal-1.2 {
  INSERT INTO a VALUES(2);
  SELECT x FROM a;
} {1 2}

do_test wal-1.3 {
  ifcapable wal {
    execsql {
      SET wal_mode_journal
      PRAGMA wal_mode
    }
  }
  ifcapable wal {
    error "PRAGMA wal_mode should fail with Journal WAL"
  } else {
    unset wal_mode_journal
  }
} {}

do_test wal-1.4 {
  ifcapable wal {
    execsql {
      SET wal_mode_memory
      PRAGMA wal_mode
    }
  }
  ifcapable wal {
    error "PRAGMA wal_mode should fail with Memory WAL"
  } else {
    unset wal_mode_memory
  }
} {}

proc main_tcl_func {num} {
  set walarg $num
  execsql {
    INSERT INTO a VALUES(5);
    SELECT x FROM a;
  }
}

proc tcl_func1 {num} {
  set walarg $num
  if { $walarg } { error "walarg should be empty" }
  catch { execsql {
    SELECT x FROM a;
  } } res
  if { $res ne {}} { error "SELECT x FROM a should fail" }
}

do_test wal-2.1 {
  main_tcl_func 1
  main_tcl_func 2
} {}

do_test wal-2.2 {
  set walarg
  execsql {
    CREATE TABLE b(y);
    INSERT INTO b VALUES(10);
  }
  set walarg
  execsql {
    SELECT y FROM b;
  }
} {10}

do_execsql_test wal-2.3 {
  BEGIN;
  INSERT INTO a VALUES(6);
  COMMIT;
  SELECT x FROM a;
} {1 2 5 6}

finish_test