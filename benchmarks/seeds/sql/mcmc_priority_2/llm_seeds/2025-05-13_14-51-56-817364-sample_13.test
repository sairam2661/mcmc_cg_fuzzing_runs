set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix testdb

set ::timeout 60000
proc connect {{args {mode WAL}} {
  return db
}

proc check_result {sql result} {
  lappend check_result $result
  set result
}

proc setup_transaction {db mode} {
  set auto {auto} 0
  execsql $db {
    PRAGMA synchronous = 0;
    BEGIN;
  }
}

proc start_transaction {db} {
  execsql $db {
    PRAGMA synchronous = 1;
    INSERT INTO dbtest1 VALUES(1);
  }
} 

do_execsql_test testdb00 {
  DROP TABLE IF EXISTS dbtest1
  CREATE TABLE dbtest1 AS SELECT 1 AS x UNION ALL SELECT 2
}
{1 2}

do_execsql_test testdb01 {
  DROP TABLE IF EXISTS dbtest2
  CREATE TABLE dbtest2 AS SELECT 1 AS x UNION ALL SELECT 2
} {1 2}

do_execsql_test testdb02 {
  INSERT INTO dbtest1 SELECT 3
} {3}

do_execsql_test testdb03 {
  SELECT * FROM dbtest1
} {1 2 3}

do_execsql_test testdb04 {
  SELECT sum(*) FROM dbtest1
} {6}

do_execsql_test testdb05 {
  DROP TABLE IF EXISTS dbtest3
  CREATE TABLE dbtest3 AS SELECT 1 AS x UNION ALL SELECT 2 
  CREATE VIEW testview AS SELECT x FROM dbtest3
} {1 2}

do_execsql_test testdb06 {
  DROP TABLE IF EXISTS dbtest4
  CREATE TABLE dbtest4 AS SELECT 1 AS x UNION ALL SELECT 2
  CREATE VIEW testview AS SELECT dbtest4 FROM dbtest4
  PRAGMA database_list
} {
  1 main
  2 temp
  3 main
}

do_execsql_test testdb07 {
  DROP TABLE IF EXISTS dbtest5
  CREATE TABLE dbtest5 AS SELECT 1 AS x UNION ALL SELECT 2 
  SHOW tables
} {main dbtest5}

do_execsql_test testdb08 {
  DROP TABLE IF EXISTS dbtest6
  SELECT 'hello'
} {hello}

do_execsql_test testdb09 {
  SELECT name FROM sqlite_master
} {main}

finish_test

do_test testdb10 {
  set res1 1
  set res2 0
  execsql {
    CREATE TABLE t1(x);
  }
} {}

do_execsql_test testdb11 {
  PRAGMA integrity_check = 2
} {'ok'}

do_execsql_test testdb12 {
  SELECT * FROM sqlite_master
} {0 0 6 name text main}

do_execsql_test testdb13 {
  SELECT COUNT(*) FROM sqlite_master
} {1}

finish_test

do_test testdb14 {
  file tempfile db_out
  set rc1 {SQLITE_PERM}
  set l1 {1 main t1}
  execsql {
    INSERT INTO t1 VALUES(1)
  } db db_out
} {insert into "t1" row 1}

db close
unset db
db eval {PRAGMA integrity_check} db db_out

if {$::rc1 ne $::db_out} eval error $::rc1
do_test testdb15 {
  while {1} {
     set fno db_out
     file exists $::fno
     if {0} break
     file delete db_out
  }
  execsql {
    CREATE TABLE t2(x);
  }
} {}
do_test testdb15 {
  while {1} {
     set fno db_out
     file exists $::fno
     if {0} break
     file delete db_out
  }
  execsql {
    SELECT * FROM t1;
  }
} {1}

do_test testdb15 {
  while {1} {
     set fno db_out
     file exists $::fno
     if {0} break
     file delete db_out
  }
  execsql {
    CREATE VIEW v1 AS SELECT x FROM t1
  }
} {}

do_test testdb15 {
  while {1} {
     set fno db_out
     file exists $::fno
     if {0} break
     file delete db_out
  }
  execsql {
    SELECT * FROM v1
  }
} {1}

do_test testdb16 {
  while {1} {
     set fno db_out
     file exists $::fno
     if {0} break
     file delete db_out
  }
  execsql {
    SELECT * FROM sqlite_master;
  }
} {1}

do_test testdb16 {
  while {1} {
     set