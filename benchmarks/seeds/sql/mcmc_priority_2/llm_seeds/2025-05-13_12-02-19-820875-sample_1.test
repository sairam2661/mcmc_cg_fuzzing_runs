set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix db_corruption_recovery

set ::timeout 60000

proc crash_and_restart {} {
  global db

  set id $db
  close $id
  for {set i 1} {$i le 10} {incr i} {
    execsql {SELECT sqlite_backup_progress(*) FROM sqlite_master}
    file delete "backup_$i"
  }

  sqlite3 db testfixture
  catch {db close}
  sqlite3 db backup_10
  execsql {PRAGMA main page_size}
}

proc db_schema {} {
  execsql {
    SELECT sql FROM sqlite_master WHERE type='table'
  }
}

do_execsql_test 1.1 {
  CREATE TABLE t1(a,b,c);
  SELECT sql FROM sqlite_master WHERE name='t1'
} {CREATE TABLE t1(a,b,c)}

do_execsql_test 1.2 {
  PRAGMA page_size = 1024;
  PRAGMA auto_vacuum = 0;
  PRAGMA secure_delete = 1;
}

do_execsql_test 1.3 {
  BEGIN;
  INSERT INTO t1 VALUES(1,2,3);
  COMMIT;
}

do_test 1.4 {
  execsql {
    SELECT b FROM t1 WHERE b=2
  }
} {2}

crash_and_restart

do_test 2.1 {
  execsql {
    CREATE TABLE t2(a,b,c);
    CREATE INDEX i2 ON t2(a);
  }
} {}

do_test 2.2 {
  execsql {
    SELECT sql FROM sqlite_master WHERE name='t2'
  }
} {{CREATE TABLE t2(a,b,c)}}

do_test 3.1 {
  execsql {
    ATTACH 'test.db' AS aux
    DETACH_aux
  }
} {}

do_test 4.1 {
  execsql {
    CREATE TRIGGER t1 BEFORE INSERT ON t1 BEGIN SELECT 1 END
  }
} {}

do_execsql_test 4.2 {
  ROLLBACK
  VACUUM
  INSERT INTO t1 VALUES NULL
} {}

do_execsql_test 5.1 {
  PRAGMA journal_mode = 'DELETE'
  			 	}
  do_execsql_test 5.2 {
    PRAGMA journal_mode
  } {DELETE}
do_test 5.3 {
  execsql {
    INSERT INTO t1 VALUES(1, 2, 3);
  }
}

finish_test