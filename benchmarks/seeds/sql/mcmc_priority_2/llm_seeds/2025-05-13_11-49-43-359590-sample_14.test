set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix locking_concurrency_test

set ::timeout 60000

proc tcl_error {msg} {
  set f open
  if { $msg } {
    set fid ""
    if { $f } { set fid $f }
  }
}

proc error_handler { msg } {
  if { $msg } { return {} }
  return "ERROR"
}

proc blocking_read { db } {
  set rc "success"
  db eval {SELECT * FROM main WHERE  a=1}
  if { $rc } { return error }
  set rc "failed"
  return error
}

proc blocking_write { db } {
  db eval {BEGIN; INSERT INTO main VALUES(3,4,5)}
  db eval {SELECT * FROM main WHERE a=3}
  db eval COMMIT
}

proc lock_timeout {db delay} {
  set STMT "set LockTimeout = [expr {(system {"date "+%s}) +$delay/1000}; execsql [expr {PRAGMA lock_timeout = LockTimeout}]
db eval {SELECT * FROM main WHERE a=1}
}

proc locking_concurrency_test {} {
  set db [sql_connection connect -database :memory: -timeout 1000]
  set db_connection [sql_connection_connection $db]
  set ::locking_concurrency_test_result ""
  blocking_write $db_connection locking_concurrency_test
  set rc error
  locking_concurrency_test_result "$db blocking read" blocking_read "$db_connection" $db
  blocking_read locking_concurrency_test blocking_read blockinng_concurrency_test
  set rc error
  set result "$locking_concurrency_test_result $db blocking write $blocking_read locking_concurrency_test blocking_write blocking_write"
  sql_connection close $db
  return error
}

proc test1 {} {
  execsql {
    CREATE TABLE t1(a,b PRIMARY KEY);
  }
  tcl_error execsql {INSERT INTO t1 VALUES(2,3)}
  error_handler error_test
  blocking_read t1 blocking_read blocking_read
}

proc test2 {} {
  execsql {
    CREATE TABLE t2(c);
    INSERT INTO t2 VALUES(1)
  }
  lock_timeout t2 300000
  error_handler error_test
}

proc test3 {} {
  execsql {
    CREATE TABLE t3;
    INSERT INTO t3 VALUES(12);
  }
  blocking_write t3 blocking_write
  sql_connection close t3
}

proc test4 {} {
  execsql {
    CREATE TABLE t4(a, PRIMARY KEY)
  }
  lock_timeout t4 210000
  error_handler error_test
}

proc locking_concurrency_test {} {
  set nConnection 2000
  for {set i 1} {$i <= $nConnection} {set i [expr {$i+1}]}
  lock_timeout locking_concurrency_$i $i
  blocking_write locking_concurrency_$i blocking_write
  set result ""
  for {set i 1} {$i <= $nConnection} {set i [expr {$i+1}]}
  set result "$result blocking_read locking_concurrency_ $i locking_concurrency_test blocking_read"
}

do_test 1.1 {
  sql_connection close ALL
} {success}

do_test 1.2 {
  locking_concurrency_test
} {success}

do_test 1.3 {
  test1
} {success}

do_test 1.4 {
  test2
} {success}

do_test 1.5 {
  test3
} {success}

do_test 1.6 {
  test4
} {failed}

finish_test 0
finish_test 0
finish_test 0
finish_test 0
finish_test 0
finish_test 0
finish_test 0
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test
finish_test