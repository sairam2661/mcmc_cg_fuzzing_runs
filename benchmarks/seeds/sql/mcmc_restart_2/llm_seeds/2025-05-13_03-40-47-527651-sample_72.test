set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix table

set ::timeout 60000

proc insert_data {} {
  execsql {
    CREATE TABLE t1(a, b);
    INSERT INTO t1 VALUES(1, 2);
    INSERT INTO t1 VALUES(3, 4);
  }
}

proc select_data {} {
  execsql {
    SELECT * FROM t1;
  }
}

proc testwal {} {
  ifcapable wal {
    return "OK"
  } else {
    return "SKIP"
  }
}

proc execsql_func {sql} {
  global db
  execsql $sql $db
}

do_test table-1.1 {
  db close
  db open sqlite test2
  execsql_func {
    CREATE TABLE t2(a, b);
    INSERT INTO t2 VALUES(1, 2);
  }
  execsql_func {SELECT * FROM t2}
} {1 2}

do_test table-1.2 {
  db close
  db open sqlite test3
  execsql_func {
    CREATE TABLE t3(a, b);
    CREATE INDEX i3 ON t3(a);
    INSERT INTO t3 VALUES(3, 4);
  }
  execsql_func {SELECT * FROM t3}
} {3 4}

do_execsql_test table-1.3 {
  BEGIN;
  INSERT INTO t3 VALUES(5, 6);
  COMMIT;
} {}

do_execsql_test table-1.4 {
  BEGIN;
  INSERT INTO t3 VALUES(7, 8);
  ROLLBACK;
  SELECT * FROM t3;
} {}

set sqlite_db main
db open sqlite test
do_test table-1.5 {
  execsql_func {
    CREATE TABLE t4(a, b);
    INSERT INTO t4 VALUES(9, 10);
  }
  lindex $sqlite_db name
} {test}

do_test table-1.6 {
  execsql_func {
    SELECT * FROM t4;
  }
  $sqlite_db mode commit immediate rollback
} {main}

do_test table-1.7 {
  if {$testwal} {
    set result "SQLITE_READONLY (0)"
  } else {
    set result "SQLITE_LOCKED (5)"
  }
  $sqlite_db func
} {$result}

do_test table-1.8 {
  set {sqlite_db eval BEGIN} SQLITE_OK
  catch {execsql_func {INSERT INTO t4 VALUES(11, 12)}}
  set {sqlite_db func UPDATE} SQLITE_OK
} {1}

finish_test