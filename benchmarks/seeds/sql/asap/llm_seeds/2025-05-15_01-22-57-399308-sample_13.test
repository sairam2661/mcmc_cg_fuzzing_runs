set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix fileio

set ::timeout 60000
sqlite_options

proc rand_string {len} {
  set str ""
  for {set i 0} {$i $len} {incr i} {
    set ch ""
    random_bytes 1 33
    set ch "[binary format c c]"
    append str $ch
  }
  return $str
}

proc create_test_file {name len} {
  if {file exists $name} {
    file delete $name
  }
  set fd "[open $name w]"
  puts $fd $rand_string $len
  close $fd
}

proc test_callback {action file} {
  set tcl_platform platform
}

foreach name {file1 file2 file3 file4 file5} {
  set len 2048
  create_test_file $name $len
}

do_test fileio-1.1 {
  list
} {}

sqlite_io_capable true
sqlitevfs io_functions
ifcapable vfile {
  sqlite_vfs_register test vfs
}

do_test fileio-1.2 {
  set list {}
  foreach {name len} {
    file1 2048
    file2 4096
    file3 16384
    file4 65536
    file5 1048576
  } {
    lappend list $name $len
  }
  set list
} {file1 2048 file2 4096 file3 16384 file4 65536 file5 1048576}

do_test fileio-1.3 {
  foreach {name len} {
    file1 2048
    file2 4096
    file3 16384
    file4 65536
    file5 1048576
  } {
    set id "[create_test_blob $name $len]"
  }
  set id
} {12 13 14 16 17 18 19 20 21 22 23}

update_callback test_callback

set testing_ioerr true
do_test fileio-4.1 {
  execsql {
    SELECT name FROM sqlite_master WHERE type='table'
  } 
} {}
update_callback {}

do_execsql_test fileio-4.2 {
  CREATE TABLE t1(a, b);
  INSERT INTO t1 VALUES(1, 2);
  SELECT sql FROM sqlite_master
} {}
finish_test