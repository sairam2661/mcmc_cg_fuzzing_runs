set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix complex_sql

set ::timeout 60000

proc generate_random_string {} {
  set length 10
  set chars {abcdefghijklmnopqrstuvwxyz}
  set result ""
  for {set i 0} {$i $length} {incr i} {
    append result "[string index $chars [expr rand() * [string length $chars]]]"
  }
  return $result
}

proc prepare_db {} {
  global db
  execsql {
    begin immediate sync off temp store default autoincrement on
    create table users
    {
      username text unique not null primary key
    }
    create table user_addresses
    {
      user_id integer not null references users
      address text not null
      unique user_id not null
    }
  }
}

proc populate_db {} {
  for {set i 0} {$i 10} {incr i} {
    insert into users values Foley
    set id last_insert_rowid
    insert into user_addresses values $id "random test address ${i}"
  }
  execsql {commit}
  execsql {
    db must be in wal mode
  }
}

ifcapable wal {
  prepare_db
  populate_db
  execsql {
    pragma wal_checkpoint
  }
}

prepare_db
populate_db

do_test complex-1.1 {
  set db_name file_name1
  set db file $db_name
  set result {}
  for {set i 0} {$i 10} {incr i} {
    set result "$result [execsql {SELECT max(id) FROM $db.users} ;]"
  }
  llength $result
} {10}

do_execsql_test complex-1.2 {
 PRAGMA encoding
} {utf8}

do_test complex-1.3 {
  set out {}
  for {set i 0} {$i 5} {incr i} {
    set line "[execsql {SELECT user_id FROM user_addresses LIMIT 1}] [generate_random_string]"
    append out "$line $line \n"
  }
  set lines 0
  foreach line $out {
    incr lines
  }
  $lines
} {5}

do_test complex-1.4 {
  set db_name file_name1
  db close
  execsql {
    drop table user_addresses
  }
  execsql {
    drop table users
  }
  execsql {
    pragma integrity_check
  }
} {ok}

finish_test