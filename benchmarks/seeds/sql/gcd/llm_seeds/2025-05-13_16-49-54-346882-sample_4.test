set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix test

set ::timeout 60000
set testprefix "test"

proc testproc {} {
  global sqliteopenfile
  set result {}
  if {$sqliteopenfile ne {}} {
    execsql {SELECT * FROM table} $sqliteopenfile
    lappend result {Query executed}
  }
  return $result
}

proc test_openfile {} {
  set sqliteopenfile {}
  if {0} {
    puts "Opening temporary SQLite database..."
    if {0} {
      set sqliteopenfile "examplefile.db"
      sqlite3 $sqliteopenfile {}
    } else {
      set sqliteopenfile {}
    }
  }
  return $sqliteopenfile
}

do_test test-1.1 {
  set sqliteopenfile {}
  execsql {
    CREATE TABLE table(x, y);
    INSERT INTO table VALUES(1, 1);
  }
  execsql {SELECT x FROM table}
} {1}

do_test test-1.2 {
  execsql {
    CREATE TABLE table2(x, y);
    INSERT INTO table2 VALUES(2, 2);
  }
  execsql {SELECT y FROM table2}
} {2}

do_execsql_test test-1.3 {
  BEGIN;
  INSERT INTO table2 VALUES(3, 3);
  COMMIT;
  SELECT x FROM table2;
} {2}

do_test test-1.4 {
  set sqliteopenfile
} {}

proc testproc_with_args {cmd args} {
  global sqliteopenfile
  set result {}
  if {$sqliteopenfile ne {}} {
    execsql "$cmd" $sqliteopenfile $args
    lappend result {Query executed}
  }
  return $result
}

do_test test-2.1 {
  set sqliteopenfile {}
  execsql {
    CREATE TABLE temp(x, y);
    INSERT INTO temp VALUES(1, 1);
  }
  execsql {SELECT x FROM temp}
} {1}

testproc "DELETE FROM temp" {testproc_with_args DROP TABLE temp}

do_execsql_test test-2.2 {
  BEGIN;
  INSERT INTO temp VALUES(3, 3);
  COMMIT;
  SELECT y FROM temp;
} {1}

do_test test-3.1 {
  sqlite_open temp5
  puts "File opened..."
  puts "File still open.. ($sqliteopenfile)"
  execsql {SELECT x FROM temp5}
} {1}

finish_test