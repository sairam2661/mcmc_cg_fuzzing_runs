set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix complextests

set ::timeout 60000

proc complexproc {} {
  global complexargs
  lappend complexargs
  expr {1}
}

proc deleteproc {} {
  global deleteargs
  global db
  db eval "DROP TABLE a"
  set deleteargs $complexargs
}

do_test complex-1.1 {
  execsql {
    CREATE TABLE a(x);
    INSERT INTO a VALUES(1);
  }
  execsql {SELECT * FROM a}
} {1}

do_execsql_test complex-1.2 {
  INSERT INTO a VALUES(2);
  SELECT * FROM a;
} {1 2}

do_execsql_test complex-1.3 {
  BEGIN;
  INSERT INTO a VALUES(3);
  COMMIT;
  SELECT * FROM a;
} {1 2 3}

do_catchsql_test complexsql {
  PRAGMA full_column_names=1;
  PRAGMA full_column_names=0;
  PRAGMA full_column_names;
} {0 {}}

ifcapable triggers {
  db function myfunction {args {lappend myargs $args}}
  do_test complex-1.4 {
    db eval {CREATE TRIGGER mytrigger
    BEFORE INSERT ON a FOR EACH ROW BEGIN
    myfunction 'MyText'NEW VALUES1 END
  }
    sqlite_log 0 "Trigger: mytrigger, action:INSERT, new values:%s" "[lsort [array get myargs]]"
    execsql {INSERT INTO a VALUES(4)}
    sqlite_log 0 "Trigger: mytrigger, action:INSERT, new values:%s" "[lsort [array get myargs]]"
  }
  {Trigger Mytrigger action INSERT new values 4 Trigger Mytrigger action INSERT new values4}
  deleteproc
  do_test complex-1.5 {
    db eval {CREATE TABLE b(d) }
    execsql {INSERT INTO b(d)VALUES('one')}
    db eval {CREATE TRIGGER mytrigger2
    BEFORE UPDATE ON a FOR EACH ROW WHEN NEW VALUES1 IS 'two'
    BEGIN SELECT 1 END}
    db eval {UPDATE a SET x  'two' WHERE x  'one'}
  }
  {1}
}

do_execsql_test complex-1.6 {
  COMMIT;
  CREATE TABLE c(x UNIQUE);
  INSERT INTO c VALUES(5);
  SELECT * FROM c;
} {5}

ifcapable tempdb {
  do_execsql_test complex-1.7 {
    CREATE TABLE d(x);
    BEGIN;
      SELECT * FROM d;
      CREATE TABLE d(y);
    COMMIT;
    SELECT * FROM d;
  }
  {}
}

ifcapable vacuum {
  ifcapable journal_mode walnut {
    do_execsql_test complex_1_8 {
      VACUUM
    } 
  }
  }

finish_test