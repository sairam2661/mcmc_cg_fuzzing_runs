set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix complex_test

set ::timeout 60000
db close
sqlite3 db test db
if { $SQLITE_VERSION_NANO eq 2 } {
   sqlite3 db test db SQLITE_TEST_REALLOC_REALISTIC
}
proc complex_proc {} {
  global complex_var
  set complex_var {}
}

do_test complex-1.1 {
  execsql {
    CREATE TABLE b(y);
    INSERT INTO b VALUES('a');
    INSERT INTO b VALUES('b');
  }
  execsql {SELECT * FROM b}
} {a}

do_execsql_test complex-1.2 {
  CREATE TABLE c(z);
  INSERT INTO c VALUES(0);
  CREATE INDEX idx ON c(z);
  SELECT * FROM c;
} {0}

do_test complex-1.3 {
  execsql {
    PRAGMA synchronous = 1;
  }
  set syncargs {}
  check_sqlite3_integrity
  expr { $syncargs eq {1} }
} {1}

do_test complex-1.4 {
  execsql {
    DROP TABLE b DROP TABLE c
  }
  set syncargs {}
  check_sqlite3_integrity
  expr { $syncargs eq {} }
} {1}

proc check_sqlite3_integrity {} {
  set res {}
  foreach {db file} {
    WAL  cache1
    inmem2 cache0
    wal3 cache3
  } {
    try {
      sqlite3 db tmp $db
      catch { db tmp2 cache1 db }
      close $db
      if { $file in {cache1 cache3} } {
	 execsql {
	     PRAGMA journal_mode =
		"%s%s"
		}
	 } else {
	  execsql { PRAGMA journal_mode = 'wal'}
	 }
      execsql {
	 CREATE TABLE d
	   AS SELECT 'hello' FROM NULL
      }
      execsql {
	 UPDATE d
	    SET d
		'goodbye'
      }
      execsql {
	 DELETE FROM d
      }
      execsql {
	 DROP TABLE d
      }
    } on error {
      lappend res { $file $::error_info }
    }
  }
  set syncargs {}
  foreach x $res {
    execsql {
      PRAGMA synchronous = 1
    }
    check_sqlite3_integrity
  }
  sqlite3 db2 file
}
do_test complex-3.1 {
  execsql {
    CREATE TABLE d(x, y);
  }
  execsql {
    INSERT INTO d VALUES(1, 7);
    INSERT INTO d VALUES(2, 3);
  }
  set d { {1 7} {2 3} }
  execsql { SELECT * FROM d }
  expr { $d eq { {1 7} {2 3} } }
} {1}

do_execsql_test complex-2.2 {
  CREATE TABLE e(x, y);
  INSERT INTO e VALUES('a', 1);
  INSERT INTO e VALUES('b', 2);
  SELECT * FROM e
} {{a} 1} 

do_test complex-3.2 {
  execsql {
    DROP TABLE d
    DROP TABLE e
  }
  set res {}
  set syncargs {}
  foreach {db file} {
    inmem3 cache0
    wal2 cache1
  } {
    try {
      sqlite3 db2 tmp $db
      set syncargs {}
      set res {}
      for {set i 0} {$i
	lt 10} { incr i } {
	execsql {
	  CREATE TABLE f(x, y)
	}
	execsql {
	  INSERT INTO f VALUES(0,0)
	}
	execsql {
	  UPDATE f
	    SET x
		$x
	  WHERE x
		$::i
	}
	execsql {
	  INSERT INTO f VALUES(1,1)
	}
      }
      execsql {
	DELETE FROM f

      }
      execsql {
	DROP TABLE f
      }
    } on error {
      lappend res { $file $::error_info }
    }
  }
  set syncargs {}
  foreach x $res {
    execsql {
      PRAGMA synchronous = 1 } 
    check_sqlite3_integrity
  sqlite3 db2 file
}

catch { db2 close }
if { "${SQLITE_VERSION_MAJOR}" "=="  3 } {
  execsql {
    ALTER TABLE e ADD COLUMN 
    c int DEFAULT 4}
}
set syncargs {}
set syncargs {}
sqlite db ".read test.db"
sqlite db ".read test.db"
catch { sqlite db ".read test.db" }
if { $SQLITE_VERSION_MAJOR "==" 3 } {
   set testcmd ".mode column\\.headers on\\.schema e"}
} { e  sqlite autoincrement on column x text column y int column c int default 4}
test_exec_sqlit3e2
catch { close sqlite db }
 catch { close sqlite db }
finish_test