set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix complex_sql

set ::timeout 60000
set enable_shared_cache 1

proc row_to_string {row} {
  lmap item {string range $row 0 end} {
    append item ", "
  }
}

proc sqlite_compile {tname args} {
  set sql ""
  foreach arg $args {
    regsub {x} $arg {argx} sql
  }
  set sql "CREATE VIEW $tname AS SELECT $sql"
  return $sql
}

proc execsql_must_succeed {sql} {
  set rc {}
  set Sql_result {}
  set Sql_errmsg {}
  catch {sqlite_exec $sql Sql_result Sql_errmsg}
  lappend rc Sql_result
  lappend rc Sql_errmsg
  return $rc
}

do_test complex-1.1 {
  execsql {
    CREATE TABLE people(id, name);
    INSERT INTO people VALUES(1, 'John');
    INSERT INTO people VALUES(2, 'Alice');
  }
} {}

do_execsql_test complex-1.2 {
  SELECT count(*) FROM people;
} {2}

do_execsql_test complex-1.3 {
  SELECT * FROM people;
} {}

do_execsql_test complex-1.4 {
  SELECT id FROM people;
} {1 2}

do_execsql_test complex-1.5 {
  SELECT name FROM people;
} {John Alice}

do_test complex-1.6 {
  llength $::tcl_interactive
} 0

do_execsql_test complex-1.7 {
  BEGIN;
  CREATE TABLE temp2(a, b);
  INSERT INTO temp2 VALUES(1, 1);
  INSERT INTO temp2 VALUES(2, 2);
  COMMIT;
} {}

ifcapable attach {
  sqlitedb attach test2 temp2 2
  db2 "CREATE TABLE test2.a (x);"
  db2 "CREATE INDEX idx_test2_a ON test2.a (x);"
  sqlite_exec "ATTACH temp3 temp2"
}

ifcapable attach {
  db2 "INSERT INTO test2.a VALUES (1)"
  db2 "UPDATE test2.a SET x = 10"
  ifcapable windowFunctions {
    db2 "SELECT DISTINCT ROW_NUMBER() FROM test2.a ORDER BY x desc"
  }
}

execsql {
  INSERT INTO people(name) VALUES ( 'Bob')
}
execsql_must_succeed {
  INSERT INTO people(name) VALUES ( 'Bob')
}

ifcapable view {
  db eval {
    CREATE VIEW v1 AS SELECT name FROM people
  }
}
execsql_must_succeed {
  DROP VIEW v1
}

execsql_must_succeed {
  SELECT * FROM v1
}

set sqlite_trace 1
do_execsql_test complex-1.42 {
  PRAGMA journalling_mode=
  "OFF"
} {}

ifcapable collate_func {
  proc collate_func coll compare {
    return $compare
  }
  db function coll compare
  do_execsql_test complex-1.43 {
    CREATE TABLE people(
      id,
      name
    );
  } {}
  do_execsql_test complex-1.44 {
    CREATE INDEX idx_people_name
      ON people(
        name
      );
  } {}
}

ifcapable json_func {
  do_execsql_test complex-1.45 {
    WITH RECURSIVERecursiveTable(k) AS
    (
      SELECT JSON_OBJECT(
        								*		          
      )
      FROM		json_object_build_value
      UNION ALL
      SELECT JSON_OBJECT(
      	*		)            
      FROM		RecursiveTable
		)
    SELECT json_object(
      *         	          
    ) FROM RecursiveTable
  } {{} {}}

}
finish_test