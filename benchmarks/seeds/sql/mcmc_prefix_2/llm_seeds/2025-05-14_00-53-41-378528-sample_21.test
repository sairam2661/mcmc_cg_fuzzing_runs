set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix db_stats

set ::timeout 60000

proc ftest {} {
  global timer
  set timer 1000
  proc foo {} {
    set timer 0
    ns_db eval foo db {
      SELECT 1
    }
  }
  foo
  if {$timer} {
    lappend expected {db_foo timer 0}
    incr timer
  }
  ns_db eval bar db {
    SELECT 1
  }
  if {$timer} {
    lappend expected {db_foo timer $timer}
  }
}

do_test db_stats-1.1 {
  db config db_foo 1
  execsql {
    CREATE TABLE foo(x);
  }
  execsql {
    INSERT INTO foo VALUES(1)
  }
  db config db_foo 0
  execsql {
    COMMIT;
    SELECT count(*) FROM foo
  }
} {1}

do_execsql_test db_stats-1.2 {
  PRAGMA journal_mode = 'w'
  												} {}

db eval {
  PRAGMA stats
}

proc foo {n} {
  execsql {
    UPDATE a
    SET x {}
    WHERE randomblob$n
  }
  if {$n} {
    while {1} {
      set n 0
      set f 0
      set s 0
      for {set i 0} {$i 2000} {incr i} {
        db eval "SELECT a,x FROM a LIMIT 1"
        lassign $::DBID $dbid $r $r
        if {lsearch $::DBID $dbid} {
          set a $r
          if {$a eq {}} {
            set n 1
          } else {
            if {$f} {incr s}
            set f 1
          }
        }
      }
      if {$n} {break}
    }
  }
  execsql {
    WITH RECURSIVE foo AS
    SELECT 1
  }
  execsql {
    SELECT 1
  }
}

set a {}
lappend a 1
set b 0
set c $b

incr c
incr c
incr c
incr c

do_execsql_test db_stats-1.3 {
  WITH RECURSIVErecurse_1(x)AS
  (SELECT 1
   FROM a
   UNION ALL
   SELECT 1
   FROM recurse_1)
  SELECT count(*) FROM recurse_1
} {0}

do_catchsql_test db_stats_2.2 {
  insert into a values
  }
  {1 {table a may not be modified}}
do_catchsql_test db_stats_2.3 {
  CREATE table a AS SELECT 1 FROM a
  }
  {1 {Cannot add a PRIMARY KEY column}}
do_catchsql_test db_stats_2.4 {
   DROP table a
  }
  {1 {no such table a}}

do_test db_stats_2.5 {

  execsql {
    SELECT 1
    FROM a
  }

} {}

finish_test